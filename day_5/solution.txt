//Making a Trie structure
class TrieNode {
    
    public :
    
	char data;
	TrieNode **children;
	bool isTerminal;

	TrieNode(char data) {
        this -> data = data;
		children = new TrieNode*[26];

		for(int i = 0; i < 26; i++) {
			children[i] = NULL;
		}
		isTerminal = false;
	}
};

class WordDictionary {
    
    //Initialize a object of TrieNode class
    TrieNode *root;
    
    public:
    
    /** Initialize your data structure here. */
    WordDictionary() {
        //Initialising root object with null character!
		root = new TrieNode('\0');
    }
    
    //A helper recursive function that takes, root along with string to be inserted!
    void insertWord(TrieNode *root, string word) {
        // Base case
        if(word.size() == 0) {
            root -> isTerminal = true;
            return;
        }
        
        // Small Calculation
        int index = word[0] - 'a';
        TrieNode *child;
        if(root -> children[index] != NULL) {
            child = root -> children[index];
        }
        else {
            child = new TrieNode(word[0]);
            root -> children[index] = child;
        }
        
        // Recursive call
        insertWord(child, word.substr(1));
    }

    /** Adds a word into the data structure. */
    void addWord(string word) {
        insertWord(root, word);
    }
    
    //A helper recursive function that takes, root along with string to be searched!
    bool searchHelp(TrieNode *root,string word){
        
        //Base Case!
        if(word.size()==1){
            if(word[0]=='.'){
                for(int i=0;i<26;i++){
                    if(root->children[i]!=NULL){
                        TrieNode*child = root->children[i];
                        if(child->isTerminal){
                            return true;
                        }
                    }
                }
                
                return false;
                
            }else{
                
                int index = word[0] - 'a';
                if(root->children[index]!=NULL){
                    TrieNode*child = root->children[index];
                    if(child->isTerminal){
                        return true;
                    }else{
                        return false;
                    }
                }else{
                    return false;
                }
            }
        }
        
        // '.' can represent anything hence exploring all possibilities
        if(word[0]=='.'){
            for(int i=0;i<26;i++){
                if(root->children[i]!=NULL){
                    if(searchHelp(root->children[i],word.substr(1))){
                        return true;
                    }
                }
            }
            //If In all possibilities, we don't find the answer then return false!
            return false;
        }else{
            
           int index = word[0] - 'a';
            if(root->children[index]!=NULL){
                return searchHelp(root->children[index],word.substr(1));
            }else{
                return false;
            } 
        }
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    bool search(string word) {
        return searchHelp(root,word);
    }
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary* obj = new WordDictionary();
 * obj->addWord(word);
 * bool param_2 = obj->search(word);
 */