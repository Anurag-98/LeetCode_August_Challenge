class Solution {
    
    public:
    
    //A function to check wether coordinates x,y are valid
    bool isSafe(int x,int y,int rows,int cols){
        
        return (x>=0 && x<rows && y>=0 && y<cols);
    }
    
    //Complete the function below!
    int orangesRotting(vector<vector<int>>& grid) {
        
        int rows = grid.size();
        if(rows==0){
            return 0;
        }
        
        int cols = grid[0].size();
        
        queue<pair<int,int>> q;
        int fresh_count = 0;
        
        //Push all rotten oranges in queue(We'll use BFS to spread impact of oranges)
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(grid[i][j]==1){
                    fresh_count++;
                }else if(grid[i][j]==2){
                    q.push({i,j});
                }
            }
        }
        
        int time=0;
        
        //While any orange that is rotten(It can potentially destroy others)
        while(!q.empty()){
            
            int size = q.size();
            time++;
            //This marks all neighbours of rotten at current level to rotten
            while(size>0){
                
                pair<int,int> currCell = q.front();
                q.pop();
                int currX = currCell.first;
                int currY = currCell.second;

                if(isSafe(currX+1,currY,rows,cols) && grid[currX+1][currY]==1){
                    fresh_count--;
                    grid[currX+1][currY]=2;
                    q.push({currX+1,currY});
                }
                if(isSafe(currX,currY+1,rows,cols) && grid[currX][currY+1]==1){
                    fresh_count--;
                    grid[currX][currY+1]=2;
                    q.push({currX,currY+1});
                }
                if(isSafe(currX-1,currY,rows,cols) && grid[currX-1][currY]==1){
                    fresh_count--;
                    grid[currX-1][currY]=2;
                    q.push({currX-1,currY});
                }
                if(isSafe(currX,currY-1,rows,cols) && grid[currX][currY-1]==1){
                    fresh_count--;
                    grid[currX][currY-1]=2;
                    q.push({currX,currY-1});
                }
               
                size--;
            }
        }
        
        //If any fresh orange is left, return -1
        if(fresh_count){
            return -1;
        }
        if(time==0){
            return 0;
        }
        
        return time-1;
    }
};